#define _CRT_SECURE_NO_WARNINGS 1

/*哈希算法：
哈希冲突：设计一个合理哈希函数(直接定值法和除留余数法)但是不能从根本上解决。
         解决方法：1.闭散列：找下一个空位置 
		                 使用方法：(1) 线性探测：从当前位置依次往后找
						           (2)非线性探测
		           2.开散列

(1)线性探测：
 1.插入：
   a.通过哈希函数计算元素在哈希表中的位置
   b.如果当前位置状态不为empty：
	  (1)状态为exist，且当前位置数值与插入元素数值相同，直接返回
	  (2)状态为delete或为exist，则线性探测，依次往后遍历查找，知道找到empty的位置为止
   c.插入元素
 2.查找：
   a.通过哈希函数计算元素在哈希表中的位置
   b.如果当前状态不为empty：
	   (1)如果状态为EXIST且元素相同，返回当前下标
	   (2)如果状态为EEXIST且data不同 或者 状态为DELETE，继续往后探测

3.删除：
  a.通过哈希函数计算元素在哈希表中的位置
  b.判断当前位置是否=被删除元素
       是---删除
	   不是---继续向后探测
*/

#include "hashtable.h"
int main()
{
	TestHashTable();
	system("pause");
	return 0;
}
